" Disable vi-compatibility
set nocompatible

""""""""""""""""
" NEOBUNDLE
""""""""""""""""
	if has ('vim_starting')
		set runtimepath+=~/.vim/bundle/neobundle.vim/
	endif

	call neobundle#begin(expand('~/.vim/bundle/'))

	" PLUGINS
		" Let NeoBundle manage NeoBundle
		NeoBundleFetch 'Shougo/neobundle.vim'

		NeoBundle 'Shougo/vimproc.vim', {
		\ 'build' : {
		\     'windows' : 'tools\\update-dll-mingw',
		\     'cygwin' : 'make -f make_cygwin.mak',
		\     'mac' : 'make -f make_mac.mak',
		\     'unix' : 'make -f make_unix.mak',
		\    },
		\ }
		NeoBundle 'Shougo/neomru.vim'
		NeoBundle 'Shougo/unite.vim'

		NeoBundle 'SearchComplete'

		NeoBundle 'tpope/vim-surround'
		NeoBundle 'tpope/vim-commentary'
		NeoBundle 'tpope/vim-unimpaired'
		NeoBundle 'tpope/vim-repeat'
		NeoBundle 'tpope/vim-sensible'
		NeoBundle 'tpope/vim-fugitive'
		NeoBundle 'kien/ctrlp.vim'
		NeoBundle 'scrooloose/nerdtree'
		NeoBundle 'jistr/vim-nerdtree-tabs'
		NeoBundle 'Lokaltog/vim-easymotion'
		NeoBundle 'ervandew/supertab'
		NeoBundle 'sjl/gundo.vim'
		NeoBundle 'terryma/vim-multiple-cursors'
		" languages
		NeoBundle 'mustache/vim-mustache-handlebars'
		NeoBundle 'Chiel92/vim-autoformat'
		" themes
		NeoBundle 'bling/vim-airline'
	" /PLUGINS

	call neobundle#end()

	" Prompt to install any newly added bundles
	NeoBundleCheck


""""""""""""""""
" SETTINGS
""""""""""""""""
	" take me to your <Leader>
	let mapleader=","
	" line numbers
	set number
	set smartcase
	set ignorecase
	set hlsearch
	set cursorline

	" spell checking (toggled with `cos`)
	" set spell

	" simple mouse support
	set mouse=a

	" paste without comments messing everything up
	set pastetoggle=<F5>

	" Let arrow keys pass \n
	set whichwrap=b,s,<,>,[,]

	" folding
	set foldmethod=indent
	set foldlevelstart=128
	set foldcolumn=2
	augroup rcFolds
		" support both indent and manual folding
		au BufReadPre * setlocal foldmethod=indent
		au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
	augroup END

	" more natural splits
	set splitbelow
	set splitright


""""""""""""""""
" MAPPINGS
""""""""""""""""
	" shift is for sucks? (avoids :W style typos)
	noremap ; :

	" C-s => save [:update]
	noremap <silent> <C-S> :update<CR>
	inoremap <silent> <C-S> <Esc>:update<CR>

	" C-q => quit [:quit]
	noremap <silent> <C-Q> :quit<CR>
	inoremap <silent> <C-Q> <Esc>:quit<CR>

	" C-S-q => force quit [:quit!]
	noremap <silent> <Leader><C-Q> :quit!<CR>
	inoremap <silent> <Leader><C-Q> <Esc>:quit!<CR>

	" C-x => save and quit [:wq]
	noremap <silent> <C-X> :wq<CR>
	" inoremap <silent> <C-X> <Esc>:wq<CR>

	" U => redo [:redo]
	noremap U <C-r>

	" insert TAB
	noremap <Leader>it i<Tab>
	noremap <Leader>at a<Tab>

	" better folding
	nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
	vnoremap <Space> zf
	nmap z` :set foldlevel=0<CR>
	nmap z1 :set foldlevel=1<CR>
	nmap z2 :set foldlevel=2<CR>
	nmap z3 :set foldlevel=3<CR>
	nmap z4 :set foldlevel=4<CR>
	nmap z5 :set foldlevel=5<CR>
	nmap z6 :set foldlevel=6<CR>
	nmap z7 :set foldlevel=7<CR>
	nmap z8 :set foldlevel=8<CR>
	nmap z9 :set foldlevel=9<CR>
	nmap z0 :set foldlevel=128<CR>

	" clear highlighted search
	nmap <silent> <leader>/ :nohlsearch<CR>

	" better pane navigation
	nnoremap <Leader>j <C-W><C-J>
	nnoremap <Leader>k <C-W><C-K>
	nnoremap <Leader>l <C-W><C-L>
	nnoremap <Leader>h <C-W><C-H>

	" visual shifting (does not exit Visual mode)
	vnoremap < <gv
	vnoremap > >gv 

	" use Q for formatting, not Ex mode
	noremap Q gq

	" set a break in undo, so CTRL-U in insert mode is less destructive
	inoremap <C-U> <C-G>u<C-U>

	" CONSOLE
		" :w!! => Get sudo when it has been forgotten.
		cmap w!! w !sudo tee % > /dev/null

		" reload vimrc config
		" cmap reload source ~/.vim/vimrc

		" change Working Directory to that of the current file
		cmap cwd lcd %:p:h

		" diff unsaved changes
		if !exists(":DiffOrig")
			command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
		endif


""""""""""""""""
" THEME
""""""""""""""""
	set t_Co=256
	colorscheme molokai


""""""""""""""""
" MISC
""""""""""""""""
	if has("autocmd")
		filetype plugin on

		augroup rcMain
			au!

			" Reload vimrc when edited (using :reload, defined above)
			autocmd! BufWritePost vimrc source ~/.vim/vimrc

			" Preserve cursor position
			au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

			" Remove trailing whitespaces and \^M chars
			au FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\\\s\\\\+$","","")'))

			" syntax highlighting

			" files without detected syntax
			au BufNewFile,BufRead * if &syntax == '' | set syntax=bash | endif
			au BufNewFile,BufRead * if &filetype == '' | set filetype=bash | endif
		augroup END
	endif


""""""""""""""""
" PLUGINS
""""""""""""""""
	" ctrlp
		" ctrlp: follow symlinks
		let g:ctrlp_show_hidden = 1

	" Unite
		let g:unite_source_history_yank_enable = 1

		if executable('ack')
			let g:unite_source_grep_command = 'ack'
			let g:unite_source_grep_default_opts = '-i --no-heading --no-color -k -H'
			let g:unite_source_grep_recursive_opt = ''
		endif

		call unite#filters#matcher_default#use(['matcher_fuzzy'])
		call unite#filters#sorter_default#use(['sorter_rank'])
		call unite#custom#source('file_rec/async', 'sorters', 'sorter_rank')

		" CtrlP search
		" current tab
		nnoremap <Leader>fp :Unite -buffer-name=files -start-insert file_rec/async:!<cr>
		" new tab
		nnoremap <Leader>ft :Unite -default-action=tabopen -buffer-name=files -start-insert file_rec/async:!<cr>
		" vertical split
		nnoremap <Leader>f- :Unite -default-action=split -buffer-name=files -start-insert file_rec/async:!<cr>
		" horizontal split
		nnoremap <Leader>f\ :Unite -default-action=vsplit -buffer-name=files -start-insert file_rec/async:!<cr>

		nnoremap <Leader>ff :Unite -buffer-name=files -start-insert file<cr>
		" recently edited files
		nnoremap <Leader>fr :Unite -buffer-name=mru file_mru<cr>
		nnoremap <Leader>fo :Unite -buffer-name=outline outline<cr>
		nnoremap <Leader>fy :Unite -buffer-name=yank history/yank<cr>
		" navigate open buffers
		nnoremap <Leader>fe :Unite -buffer-name=buffers buffer<cr>
		" search within files
		nnoremap <Leader>fg :Unite grep:.<cr>

	" NERDTree
		" NERDTree: show hidden files
		" let g:NERDTreeShowHidden = 1

		" always focus file pane (this doesn't seem to work)
		" let g:nerdtree_tabs_smart_startup_focus = 2

		" if no files were passed, open NERDTree on startup
		" autocmd StdinReadPre * let s:std_in=1
		" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

		" L-n => toggle NERDTreeTabs
		map <Leader>n <plug>NERDTreeTabsToggle<CR>

	" Gundu
		" L-u => toggle gundu menu [:GunduToggle]
		map <Leader>u :GundoToggle<CR>

	" vim-surround
		" |vs| => |vS|
		vmap s S

	" vim-airline
		" powerline symbols
		let g:airline_powerline_fonts = 1
	
	" vim-autoformat
		" format entire file
		noremap QQ :Autoformat<CR>

