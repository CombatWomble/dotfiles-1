" Disable vi-compatibility
set nocompatible

""""""""""""""""
" NEOBUNDLE
""""""""""""""""

if has ('vim_starting')
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

" PLUGINS
	" Let NeoBundle manage NeoBundle
	NeoBundleFetch 'Shougo/neobundle.vim'

	NeoBundle 'Shougo/vimproc.vim', {
	\ 'build' : {
	\     'windows' : 'tools\\update-dll-mingw',
	\     'cygwin' : 'make -f make_cygwin.mak',
	\     'mac' : 'make -f make_mac.mak',
	\     'unix' : 'make -f make_unix.mak',
	\    },
	\ }
	NeoBundle 'Shougo/neomru.vim'
	NeoBundle 'Shougo/unite.vim'

	NeoBundle 'SearchComplete'

	NeoBundle 'tpope/vim-surround'
	NeoBundle 'tpope/vim-commentary'
	NeoBundle 'tpope/vim-unimpaired'
	NeoBundle 'tpope/vim-repeat'
	NeoBundle 'tpope/vim-sensible'
	NeoBundle 'tpope/vim-fugitive'
	NeoBundle 'kien/ctrlp.vim'
	NeoBundle 'scrooloose/nerdtree'
	NeoBundle 'jistr/vim-nerdtree-tabs'
	NeoBundle 'Lokaltog/vim-easymotion'
	NeoBundle 'ervandew/supertab'
	NeoBundle 'sjl/gundo.vim'
	NeoBundle 'terryma/vim-multiple-cursors'
	" themes
	NeoBundle 'bling/vim-airline'
" /PLUGINS

call neobundle#end()

" Prompt to install any newly added bundles
NeoBundleCheck


""""""""""""""""
" SETTINGS
""""""""""""""""

" take me to your <Leader>
let mapleader=","
" line numbers
set number
set smartcase
set hlsearch
set cursorline
" spell checking (toggled with `cos`)
" set spell
" simple mouse support
set mouse=a
" paste without comments messing everything up
set pastetoggle=<F5>
" Let arrow keys pass \n
set whichwrap=b,s,<,>,[,]


""""""""""""""""
" MAPPINGS
""""""""""""""""

" :w!! => Get sudo when it has been forgotten.
cmap w!! w !sudo tee > /dev/null %

" C-s => save [:update]
noremap <silent> <C-S> :update<CR>
inoremap <silent> <C-S> <Esc>:update<CR>

" C-q => quit [:quit]
noremap <silent> <C-Q> :quit<CR>
inoremap <silent> <C-Q> <Esc>:quit<CR>

" C-S-q => force quit [:quit!]
noremap <silent> <Leader><C-Q> :quit!<CR>
inoremap <silent> <Leader><C-Q> <Esc>:quit!<CR>

" C-x => save and quit [:wq]
noremap <silent> <C-X> :wq<CR>
inoremap <silent> <C-X> <Esc>:wq<CR>

" U => redo [:redo]
noremap U <C-r>

" insert TAB
noremap <Leader>it i<Tab>
noremap <Leader>at a<Tab>


""""""""""""""""
" THEME
""""""""""""""""

set t_Co=256
colorscheme molokai


""""""""""""""""
" MISC
""""""""""""""""

if has("autocmd")
	filetype plugin on

	" Reload vimrc when edited
	augroup watchconfig
		au!
		autocmd! BufWritePost vimrc source ~/.vim/vimrc
	augroup END

	" Preserve cursor position
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

	" syntax highlighting

	" files without detected syntax
	au BufNewFile,BufRead * if &syntax == '' | set syntax=bash | endif
	au BufNewFile,BufRead * if &filetype == '' | set filetype=bash | endif
endif


""""""""""""""""
" PLUGINS
""""""""""""""""

" ctrlp
	" ctrlp: follow symlinks
	let g:ctrlp_show_hidden = 1

" Unite
	let g:unite_source_history_yank_enable = 1

	call unite#filters#matcher_default#use(['matcher_fuzzy'])
	call unite#filters#sorter_default#use(['sorter_rank'])
	call unite#custom#source('file_rec/async', 'sorters', 'sorter_rank')

	" CtrlP search
	" current tab
	nnoremap <Leader>fp :Unite -no-split -buffer-name=files -start-insert file_rec/async:!<cr>
	" new tab
	nnoremap <Leader>ft :Unite -default-action=tabopen -buffer-name=files -start-insert file_rec/async:!<cr>
	" vertical split
	nnoremap <Leader>f- :Unite -default-action=split -buffer-name=files -start-insert file_rec/async:!<cr>
	" horizontal split
	nnoremap <Leader>f\ :Unite -default-action=vsplit -buffer-name=files -start-insert file_rec/async:!<cr>

	nnoremap <Leader>ff :Unite -no-split -buffer-name=files -start-insert file<cr>
	" recently edited files
	nnoremap <Leader>fr :Unite -no-split -buffer-name=mru -start-insert file_mru<cr>
	nnoremap <Leader>fo :Unite -no-split -buffer-name=outline -start-insert outline<cr>
	nnoremap <Leader>fy :Unite -buffer-name=yank history/yank<cr>
	" navigate open buffers
	nnoremap <Leader>fe :Unite -no-split -buffer-name=buffers buffer<cr>
	" search within files
	nnoremap <Leader>fg :Unite grep:.<cr>

" NERDTree
	" NERDTree: show hidden files
	let g:NERDTreeShowHidden = 1

	" Open NERDTree on console vim startup
	let g:nerdtree_tabs_open_on_console_startup = 1

	" L-n => toggle NERDTreeTabs
	map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Gundu
	" L-u => toggle gundu menu [:GunduToggle]
	map <Leader>u :GundoToggle<CR>

" vim-surround
	" |vs| => |vS|
	vmap s S

" vim-airline
	" powerline symbols
	let g:airline_powerline_fonts = 1

