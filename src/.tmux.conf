################################################################
# SETTINGS
################################################################

# use vi mode
set -wg mode-keys vi
set -g status-keys vi
setw -g xterm-keys on

setw -g utf8 on
set -g status-utf8 on

set -g default-terminal "screen-256color"
set -g history-limit 10000
set -sg escape-time 0

# 0 is far, far away
set -g base-index 1
set -g pane-base-index 1

# directly expose pane titles
set -g set-titles on
# set -g set-titles-string "#T"
# set -g set-titles-string "#T #W"

# Allows for faster key repetition
set -g repeat-time 500 #(default)

setw -g monitor-activity on
set -g visual-activity on

# urgency hints
set-option -g bell-action any
set-option -g bell-on-alert on

# only resize shared windows
setw -g aggressive-resize on

# not being able to move whole words is annoying
# set-window-option -g xterm-keys on

# mice infestation
set -g mode-mouse on
set -g mouse-utf8 off
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on


################################################################
# THEME
################################################################

# tmuxline
theme="~/dotfiles/src/themes/tmuxline.conf"
if-shell "test -f $theme" "source $theme"


################################################################
# MAPPINGS
################################################################

################
## MISC
################

# same command prompt alias as vim
bind \; command-prompt

# force a reload of the config file
bind r source ~/.tmux.conf\; display "Config reloaded."

# next layout (since I stole Space)
bind U next-layout

# detach
bind D detach


################
## PREFIX
################

unbind C-b
set -g prefix C-Space
# nested prefix
bind C-Space send-prefix
bind Space send-prefix


################
## SESSIONS
################

bind s choose-tree
bind S command-prompt -p "New session:" "new-session -A -s %%"
bind M-s confirm kill-session
bind M-S kill-session


################
## BUFFERS (panes)
################

# first attempt at corded mappings
# TODO: IF I leave this in (unlikely), generate the gruntwork (pun)
# TODO: this is ideal: http://sourceforge.net/p/tmux/mailman/message/32331408/
# TODO: vet this instead: http://superuser.com/a/424392, though needs to listen for keys (not a prompt)
# bind b run ~/dotfiles/lib/tmux-cords.sh buffer
# bind b run "read -r -n 10 -t 10 aoeu; tmux send-key t; tmux display $aoeu"
bind b \
	bind -n j split-window -v -c "#{pane_current_path}" \\; \
		unbind -n h \\; unbind -n l \\; unbind -n j \\; unbind -n k \; \
	bind -n k split-window -v -c "#{pane_current_path}"\\; swap-pane -U \\; \
		unbind -n h \\; unbind -n l \\; unbind -n j \\; unbind -n k \; \
	bind -n h split-window -h -c "#{pane_current_path}"\\; swap-pane -U \\; \
		unbind -n h \\; unbind -n l \\; unbind -n j \\; unbind -n k \; \
	bind -n l split-window -h -c "#{pane_current_path}" \\; \
		unbind -n h \\; unbind -n l \\; unbind -n j \\; unbind -n k

# SPLITTING

bind j split-window -v -c "#{pane_current_path}"
bind k split-window -v -c "#{pane_current_path}"\; swap-pane -U
bind h split-window -h -c "#{pane_current_path}"\; swap-pane -U
bind l split-window -h -c "#{pane_current_path}"

# SWAPPING

bind -r J swap-pane -D
bind -r K swap-pane -U
bind -r H swap-pane -U
bind -r L swap-pane -D

# RESIZING

bind -r C-j resize-pane -D 10
bind -r C-k resize-pane -U 10
bind -r C-h resize-pane -L 10
bind -r C-l resize-pane -R 10

# NAVIGATING

# Smart pane switching with awareness of vim splits
bind -n C-j run "(tmux display-message -p '#{pane_current_command} #{pane_title}' | grep -iqE '(^vim | - VIM$)' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command} #{pane_title}' | grep -iqE '(^vim | - VIM$)' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-h run "(tmux display-message -p '#{pane_current_command} #{pane_title}' | grep -iqE '(^vim | - VIM$)' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-l run "(tmux display-message -p '#{pane_current_command} #{pane_title}' | grep -iqE '(^vim | - VIM$)' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command} #{pane_title}' | grep -iqE '(^vim | - VIM$)' && tmux send-keys 'C-\\') || tmux select-pane -l"

# fallback for weird situations
bind -r Up select-pane -U
bind -r Down select-pane -D
bind -r Left select-pane -L
bind -r Right select-pane -R

# previous buffer (since I stole ;)
bind \ last-pane

bind c confirm kill-pane
bind M-c kill-pane


################
## WINDOWS
################

bind w choose-window
bind W new-window -a
bind M-w confirm kill-window
bind M-W kill-window

# match <prefix-n> (`next-window`)
bind -r n next-window
bind -r p previous-window
bind -r d next-window
bind -r u previous-window


################
## COPY PASTA
################

bind v copy-mode
bind-key -t vi-copy y copy-pipe "xsel -ib"
bind-key -t vi-copy enter copy-pipe "xsel -ib"
bind-key -t vi-copy v begin-selection


################
## MOUSES
################

# turn mouse on
bind M \
	set -g mode-mouse on \;\
	set -g mouse-resize-pane on \;\
	set -g mouse-select-pane on \;\
	set -g mouse-select-window on \;\
	display 'Mouse: ON'

# turn mouse off
bind m \
	set -g mode-mouse off \;\
	set -g mouse-resize-pane off \;\
	set -g mouse-select-pane off \;\
	set -g mouse-select-window off \;\
	display 'Mouse: OFF'
