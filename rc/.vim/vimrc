" Disable vi-compatibility
set nocompatible

""""""""""""""""
" NEOBUNDLE
""""""""""""""""
	if has ('vim_starting')
		set runtimepath+=~/.vim/bundle/neobundle.vim/
	endif

	call neobundle#begin(expand('~/.vim/bundle/'))

	" PLUGINS
		" Let NeoBundle manage NeoBundle
		NeoBundleFetch 'Shougo/neobundle.vim'

		NeoBundle 'Shougo/vimproc.vim', {
		\ 'build' : {
		\     'windows' : 'tools\\update-dll-mingw',
		\     'cygwin' : 'make -f make_cygwin.mak',
		\     'mac' : 'make -f make_mac.mak',
		\     'unix' : 'make -f make_unix.mak',
		\    },
		\ }

		" unite
		NeoBundle 'Shougo/unite.vim'
		NeoBundle 'Shougo/neomru.vim'
		NeoBundle 'Shougo/unite-outline'
		NeoBundle 'thinca/vim-unite-history'

		" enhancements
		NeoBundle 'SearchComplete'

		" navigation
		NeoBundle 'Lokaltog/vim-easymotion'

		" languages
		NeoBundle 'mustache/vim-mustache-handlebars'
		NeoBundle 'Chiel92/vim-autoformat'

		" utils
		NeoBundle 'tpope/vim-surround'
		NeoBundle 'tpope/vim-commentary'
		NeoBundle 'tpope/vim-unimpaired'
		NeoBundle 'tpope/vim-repeat'
		NeoBundle 'tpope/vim-sensible'
		NeoBundle 'tpope/vim-fugitive'
		NeoBundle 'kien/ctrlp.vim'
		NeoBundle 'scrooloose/nerdtree'
		NeoBundle 'jistr/vim-nerdtree-tabs'
		NeoBundle 'ervandew/supertab'
		NeoBundle 'sjl/gundo.vim'
		NeoBundle 'terryma/vim-multiple-cursors'
		NeoBundle 'LaTeX-Box-Team/LaTeX-Box'
		NeoBundle 'rking/ag.vim'
		NeoBundle 'AndrewRadev/linediff.vim'
		NeoBundle 'scrooloose/syntastic'

		" UI
		NeoBundle 'bling/vim-airline'
		NeoBundle 'nanotech/jellybeans.vim'
		NeoBundle 'tomasr/molokai'
		NeoBundle 'xoria256.vim'
		NeoBundle 'altercation/vim-colors-solarized'
		NeoBundle 'chriskempson/base16-vim'

		" external
		NeoBundle 'christoomey/vim-tmux-navigator'
		NeoBundle 'edkolev/tmuxline.vim'
		NeoBundle 'edkolev/promptline.vim'
	" /PLUGINS

	call neobundle#end()

	" Prompt to install any newly added bundles
	NeoBundleCheck


""""""""""""""""
" SETTINGS
""""""""""""""""
	" take me to your <leader>
	let mapleader=","
	let maplocalleader="-"
	" line numbers
	set number
	set smartcase
	set ignorecase
	set hlsearch
	set cursorline

	" tabs!
	set tabstop=4
	set shiftwidth=4

	" turn off auto-textwrap (vim-sensible turns it on)
	set textwidth=0

	" spell checking (toggled with `cos`)
	" set spell

	" simple mouse support
	set mouse=a

	" paste without comments messing everything up
	set pastetoggle=<f4>

	" Let arrow keys pass \n
	set whichwrap=b,s,<,>,[,]

	" folding
	set foldmethod=indent
	set foldlevelstart=128
	set foldcolumn=2
	augroup rcFolds
		" support both indent and manual folding
		au BufReadPre * setlocal foldmethod=indent
		au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
	augroup END

	" more natural splits
	set splitbelow
	set splitright


""""""""""""""""
" THEME
""""""""""""""""
	syntax enable
	set t_Co=256
	set background=dark
	" set background=light

	" colorscheme molokai
	" colorscheme jellybeans

	colorscheme xoria256
	let g:rehash256 = 1

	" let g:solarized_termtrans = 1
	" " let g:solarized_termcolors=256
	" colorscheme solarized
	call togglebg#map("<f5>")


""""""""""""""""
" MAPPINGS
""""""""""""""""
	" fix Y
	noremap Y y$

	" shift is for sucks? (avoids :W style typos)
	noremap ; :

	" C-s => save [:update]
	noremap <silent> <leader>w :update<cr>
	noremap <silent> <leader>W :write<cr>
	noremap <silent> <c-s> :write<cr>
	inoremap <silent> <c-s> <esc>:write<cr>

	" C-q => quit [:quit]
	noremap <silent> <leader>q :quit<cr>
	noremap <silent> <c-q> :quit<cr>
	inoremap <silent> <c-q> <esc>:quit<cr>
	" C-S-q => force quit [:quit!]
	noremap <silent> <leader>Q :quit!<cr>
	noremap <silent> <leader><c-q> :quit!<cr>

	" C-x => save and quit [:wq]
	noremap <silent> <leader>x :wq<cr>

	" U => redo [:redo]
	" noremap U <c-r>

	" insert TAB
	noremap <leader>it i<tab>
	noremap <leader>at a<tab>

	" new tab
	nnoremap <leader>t :tabnew<cr>

	" better folding
	nnoremap <silent> <space> @=(foldlevel('.')?'za':"\<space>")<cr>
	vnoremap <space> zf
	nmap z` :set foldlevel=0<cr>
	nmap z1 :set foldlevel=1<cr>
	nmap z2 :set foldlevel=2<cr>
	nmap z3 :set foldlevel=3<cr>
	nmap z4 :set foldlevel=4<cr>
	nmap z5 :set foldlevel=5<cr>
	nmap z6 :set foldlevel=6<cr>
	nmap z7 :set foldlevel=7<cr>
	nmap z8 :set foldlevel=8<cr>
	nmap z9 :set foldlevel=9<cr>
	nmap z0 :set foldlevel=128<cr>
	nmap zz :call ToggleFold()<cr>
	let b:foldlevel=&l:foldlevel
	function! ToggleFold()
		if &l:foldmethod == 'indent'
			set foldmethod=manual
		else
			set foldmethod=indent
		endif
		" if &l:foldenable
		" 	let b:foldlevel=&l:foldlevel
		" 	set nofoldenable
		" else
		" 	set foldenable
		" 	set foldlevel = b:foldlevel
		" endif
	endfunction

	" clear highlighted search
	nmap <silent> <leader>/ :nohlsearch<cr>

	" better pane navigation
	nnoremap <leader>j <c-w><c-j>
	nnoremap <leader>k <c-w><c-k>
	nnoremap <leader>l <c-w><c-l>
	nnoremap <leader>h <c-w><c-h>

	" visual shifting (does not exit Visual mode)
	vnoremap < <gv
	vnoremap > >gv 

	" use Q for formatting, not Ex mode
	noremap Q gq

	" set a break in undo, so CTRL-U in insert mode is less destructive
	inoremap <c-u> <c-g>u<c-u>

	" switch to alternate file
	noremap <leader><leader> <c-^>

	" easier system clipboard
	nnoremap <leader>y "+y
	vnoremap <leader>y "+y
	nnoremap <leader>Y "+Y
	vnoremap <leader>Y "+Y
	nnoremap <leader>p "+p
	vnoremap <leader>p "+p
	nnoremap <leader>P "+P
	vnoremap <leader>P "+P

	" grade-A prankster
	noremap <up> <down>
	noremap <down> <up>
	noremap <left> <right>
	noremap <right> <left>

	" CONSOLE
		" :w!! => Get sudo when it has been forgotten.
		cmap w!! w !sudo tee % > /dev/null

		" reload vimrc config
		" cmap reload source ~/.vim/vimrc

		" change Working Directory to that of the current file
		cmap cwd lcd %:p:h

		" diff unsaved changes
		if !exists(":DiffOrig")
			command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
		endif


""""""""""""""""
" MISC
""""""""""""""""
	if has("autocmd")
		filetype plugin on

		augroup rcMain
			au!

			" Reload vimrc when edited (using :reload, defined above)
			autocmd! BufWritePost vimrc source ~/.vim/vimrc

			" Preserve cursor position
			au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

			" Remove trailing whitespaces and \^M chars
			au FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1, map(getline(1, "$"), 'substitute(v:val, "\\\\s\\\\+$", "", "")'))

			" turn on spell check in certain files, and move cursor to beginning of gitcommits
			au BufRead,BufNewFile *.md setlocal spell | set complete+=kspell
			au FileType gitcommit setlocal spell | set complete+=kspell | call cursor(1, 1)

			" syntax highlighting

			" files without detected syntax
			au BufNewFile,BufRead * if &syntax == '' | set syntax=bash | endif
			au BufNewFile,BufRead * if &filetype == '' | set filetype=bash | endif
		augroup END
	endif


""""""""""""""""
" PLUGINS
""""""""""""""""
	" ctrlp
		" ctrlp: follow symlinks
		let g:ctrlp_show_hidden = 1

	" Unite
		let g:unite_source_history_yank_enable = 1

		" ack >> grep
		if executable('ack')
			let g:unite_source_grep_command = 'ack'
			let g:unite_source_grep_default_opts = '-i --no-heading --no-color -k -H'
			let g:unite_source_grep_recursive_opt = ''
		endif

		" ag >> ack
		if executable('ag')
			let g:unite_source_grep_command = 'ag'
			let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
			let g:unite_source_grep_recursive_opt = ''
		endif

		call unite#filters#matcher_default#use(['matcher_fuzzy'])
		call unite#filters#sorter_default#use(['sorter_rank'])
		call unite#custom#source('file_rec/async', 'sorters', 'sorter_rank')

		" in-buffer settings
		function! s:unite_settings()
			let b:SuperTabDisabled = 1

			imap <buffer> <c-j> <plug>(unite_select_next_line)
			imap <buffer> <c-k> <plug>(unite_select_previous_line)
			imap <buffer> <c-a> <plug>(unite_choose_action)

			" open in horizontal split
			nmap <silent><buffer><expr> s unite#do_action('split')
			imap <silent><buffer><expr> <c-s> unite#do_action('split')
			" open in vertical split
			nmap <silent><buffer><expr> v unite#do_action('vsplit')
			imap <silent><buffer><expr> <c-v> unite#do_action('vsplit')
			" open in new tab
			imap <silent><buffer><expr> <c-t> unite#do_action('tabopen')

			" exit
			nmap <buffer> <esc> <plug>(unite_exit)
		endfunction
		autocmd FileType unite call s:unite_settings()

		" prefix
		nnoremap [unite] <nop>
		nmap <leader><space> [unite]

		" general
		nnoremap [unite]<space> :Unite -buffer-name=general -start-insert source<cr>

		" files
		" search, single directory
		nnoremap [unite]f :Unite -buffer-name=files file file/new directory/new<cr>
		nnoremap [unite]F :UniteWithBufferDir -buffer-name=files file file/new directory/new<cr>
		" cd
		nnoremap [unite]c :Unite -buffer-name=files -default-action=cd directory directory/new<cr>
		nnoremap [unite]C :UniteWithBufferDir -buffer-name=files -default-action=cd directory directory/new<cr>
		" search, recursive
		nnoremap [unite]p :Unite -buffer-name=files -start-insert file_rec/async:!<cr>
		nnoremap [unite]t :Unite -buffer-name=files -start-insert -default-action=tabopen file_rec/async:!<cr>

		" recents
		" files
		nnoremap [unite]r :Unite -buffer-name=recent file_mru<cr>
		" dirs
		nnoremap [unite]R :Unite -buffer-name=recent -default-action=cd direcory_mru<cr>
		" open buffers
		nnoremap [unite]b :Unite -buffer-name=buffers buffer<cr>
		" buffer, tab, or files
		nnoremap [unite]a :Unite -start-insert buffer tab file_mru directory_mru bookmark<cr>

		" content
		" outline
		nnoremap [unite]o :Unite -buffer-name=outline -auto-preview outline<cr>
		" line
		nnoremap [unite]l :Unite -buffer-name=line -start-insert line<cr>

		" yank stack
		nnoremap [unite]y :Unite -buffer-name=yank history/yank<cr>

		" search within files
		nnoremap [unite]g :Unite grep:.<cr>
		nnoremap [unite]G :Unite grep<cr>

		" change and line
		nnoremap [unite]k :Unite -buffer-name=search change line<cr>

		" command history
		nnoremap [unite]; :Unite -buffer-name=commands -default-action=execute history/command command<cr>

	" NERDTree
		" NERDTree: show hidden files
		" let g:NERDTreeShowHidden = 1

		" always focus file pane (this doesn't seem to work)
		" let g:nerdtree_tabs_smart_startup_focus = 2

		" if no files were passed, open NERDTree on startup
		" autocmd StdinReadPre * let s:std_in=1
		" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

		" L-n => toggle NERDTreeTabs
		map <leader>n <plug>NERDTreeTabsToggle<cr>

	" Gundu
		" L-u => toggle gundu menu [:GunduToggle]
		map <leader>u :GundoToggle<cr>

	" vim-surround
		" |vs| => |vS|
		vmap s S

	" vim-airline
		" powerline symbols
		let g:airline#extensions#tabline#enabled = 1
		let g:airline_powerline_fonts   = 1
		let g:airline_theme             = 'base16'
		let g:airline_enable_branch     = 1

		if !exists('g:airline_symbols')
			let g:airline_symbols = {}
		endif
		" let g:airline_symbols.space = "\ua0"

	" vim-autoformat
		" format entire file
		noremap QQ :Autoformat<cr>

	" vim-easymotion
		" prefix
		map <leader>f <plug>(easymotion-prefix)

		" vim-sneak
		nmap s <plug>(easymotion-s2)
		nmap S <plug>(easymotion-bd-s2)

	" vim-tmux-navigator
		" let the nav shortcuts work anywhere
		let g:tmux_navigator_no_mappings = 1

		nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
		nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
		nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
		nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
		nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

		nnoremap <silent> <m-h> :TmuxNavigateLeft<cr>
		nnoremap <silent> <m-l> :TmuxNavigateRight<cr>
		nnoremap <silent> <m-k> :TmuxNavigateUp<cr>
		nnoremap <silent> <m-j> :TmuxNavigateDown<cr>
		nnoremap <silent> <m-\> :TmuxNavigatePrevious<cr>

		vnoremap <silent> <c-h> <esc>:TmuxNavigateLeft<cr>
		vnoremap <silent> <c-l> <esc>:TmuxNavigateDown<cr>
		vnoremap <silent> <c-k> <esc>:TmuxNavigateUp<cr>
		vnoremap <silent> <c-j> <esc>:TmuxNavigateRight<cr>
		vnoremap <silent> <c-\> <esc>:TmuxNavigatePrevious<cr>

		vnoremap <silent> <m-h> <esc>:TmuxNavigateLeft<cr>
		vnoremap <silent> <m-l> <esc>:TmuxNavigateDown<cr>
		vnoremap <silent> <m-k> <esc>:TmuxNavigateUp<cr>
		vnoremap <silent> <m-j> <esc>:TmuxNavigateRight<cr>
		vnoremap <silent> <m-\> <esc>:TmuxNavigatePrevious<cr>

		inoremap <silent> <c-h> <esc>:TmuxNavigateLeft<cr>
		inoremap <silent> <c-l> <esc>:TmuxNavigateDown<cr>
		inoremap <silent> <c-k> <esc>:TmuxNavigateUp<cr>
		inoremap <silent> <c-j> <esc>:TmuxNavigateRight<cr>
		inoremap <silent> <c-\> <esc>:TmuxNavigatePrevious<cr>

		inoremap <silent> <m-h> <esc>:TmuxNavigateLeft<cr>
		inoremap <silent> <m-l> <esc>:TmuxNavigateDown<cr>
		inoremap <silent> <m-k> <esc>:TmuxNavigateUp<cr>
		inoremap <silent> <m-j> <esc>:TmuxNavigateRight<cr>
		inoremap <silent> <m-\> <esc>:TmuxNavigatePrevious<cr>

